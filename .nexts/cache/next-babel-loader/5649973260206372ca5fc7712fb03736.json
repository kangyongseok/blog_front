{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { ThemeProvider, createGlobalStyle } from 'styled-components';\nimport { Provider } from 'react-redux';\nimport withRedux from 'next-redux-wrapper';\nimport withReduxSaga from 'next-redux-saga';\nimport Layout from '../components/CommonUI/Layout';\nimport configureStore from '../store/configureStore';\nimport { useState, useEffect } from 'react';\n\n// composeWithDevTools()\n// const configureStore = () => {\n//   const sagaMiddleware = createSagaMiddleware();\n//   const middleware = [composeWithDevTools(), sagaMiddleware]\n//   const store = createStore(rootReducer,  applyMiddleware(sagaMiddleware) );\n//   // if (req || !isServer) {\n//     sagaMiddleware.run(rootSaga)\n//   // }\n//   return store;\n// };\nconst MyApp2 = props => {\n  const {\n    Component,\n    pageProps,\n    store\n  } = props;\n  const {\n    0: token,\n    1: setToken\n  } = useState(null);\n  useEffect(() => {\n    const tokenData = JSON.parse(sessionStorage.getItem(\"idToken\"));\n    setToken(tokenData);\n  }, []);\n  return __jsx(ThemeProvider, {\n    theme: {\n      fontFamily: 'Noto Sans KR'\n    }\n  }, __jsx(Provider, {\n    store: store\n  }, __jsx(Layout, {\n    token: token\n  }, __jsx(Component, pageProps))), __jsx(React.Fragment, null, __jsx(GlobalStyle, null)));\n};\n\nMyApp2.getInitialProps = async ({\n  Component,\n  ctx,\n  sessionStorage\n}) => {\n  let pageProps = {}; // 서버사이드에서 리덕스 연결 성공. 원인 공부\n\n  if (ctx.isServer) {\n    pageProps = await Component.getInitialProps(ctx);\n  }\n\n  return {\n    pageProps\n  };\n};\n\nexport default withRedux(configureStore)(withReduxSaga(MyApp2));\nconst GlobalStyle = createGlobalStyle`\n  html {\n    font-size:62.5%;\n    background-color: #fff;\n  }\n  body {\n    margin: 0;\n    padding: 0;\n    font-size: 18px;\n    font-weight: normal;\n    line-height: 1.8;\n    color: #343a40;\n    font-family: 'Noto Sans KR';\n    box-sizing: border-box;\n  }\n  * {\n    margin: 0;\n    padding: 0;\n    outline: 0;\n    border: 0;\n    vertical-align: top;\n  }\n  article, footer, header, aside, details, header, nav, section {\n    display: block;\n  }\n\n  img {\n    max-width: 100%;\n  }\n  a {\n    text-decoration: none;\n    color: #343a40;\n  }\n  h1 {\n    font-weight: 700;\n  }\n  button {\n    cursor: pointer;\n  }\n  p {\n    margin: 0;\n  }`;","map":{"version":3,"sources":["C:/Users/lchon/Project/blog_front/pages/_app.tsx"],"names":["ThemeProvider","createGlobalStyle","Provider","withRedux","withReduxSaga","Layout","configureStore","useState","useEffect","MyApp2","props","Component","pageProps","store","token","setToken","tokenData","JSON","parse","sessionStorage","getItem","fontFamily","getInitialProps","ctx","isServer","GlobalStyle"],"mappings":";;AACA,SAASA,aAAT,EAAwBC,iBAAxB,QAAiD,mBAAjD;AACA,SAASC,QAAT,QAAyB,aAAzB;AAEA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,MAAP,MAAmB,+BAAnB;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,MAAM,GAAIC,KAAD,IAAmB;AAChC,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,SAAb;AAAwBC,IAAAA;AAAxB,MAAkCH,KAAxC;AACA,QAAM;AAAA,OAACI,KAAD;AAAA,OAAQC;AAAR,MAAoBR,QAAQ,CAAC,IAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMQ,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWC,cAAc,CAACC,OAAf,CAAuB,SAAvB,CAAX,CAAlB;AACAL,IAAAA,QAAQ,CAACC,SAAD,CAAR;AACD,GAHQ,EAGN,EAHM,CAAT;AAKA,SACE,MAAC,aAAD;AAAe,IAAA,KAAK,EAAE;AAAEK,MAAAA,UAAU,EAAE;AAAd;AAAtB,KACE,MAAC,QAAD;AAAU,IAAA,KAAK,EAAER;AAAjB,KACE,MAAC,MAAD;AAAQ,IAAA,KAAK,EAAEC;AAAf,KACE,MAAC,SAAD,EAAeF,SAAf,CADF,CADF,CADF,EAME,4BACE,MAAC,WAAD,OADF,CANF,CADF;AAYD,CArBD;;AAsBAH,MAAM,CAACa,eAAP,GAAyB,OAAO;AAAEX,EAAAA,SAAF;AAAaY,EAAAA,GAAb;AAAkBJ,EAAAA;AAAlB,CAAP,KAA8C;AACrE,MAAIP,SAAS,GAAG,EAAhB,CADqE,CAErE;;AACA,MAAIW,GAAG,CAACC,QAAR,EAAkB;AAChBZ,IAAAA,SAAS,GAAG,MAAMD,SAAS,CAACW,eAAV,CAA0BC,GAA1B,CAAlB;AACC;;AACD,SAAO;AAAEX,IAAAA;AAAF,GAAP;AACH,CAPD;;AASA,eAAeT,SAAS,CAACG,cAAD,CAAT,CAA0BF,aAAa,CAACK,MAAD,CAAvC,CAAf;AAEA,MAAMgB,WAAW,GAAGxB,iBAAkB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAAtC","sourcesContent":["import {  AppContext, AppInitialProps } from 'next/app';\r\nimport { ThemeProvider, createGlobalStyle } from 'styled-components';\r\nimport { Provider } from 'react-redux';\r\nimport { Store } from 'redux';\r\nimport withRedux from 'next-redux-wrapper';\r\nimport withReduxSaga from 'next-redux-saga';\r\nimport Layout from '../components/CommonUI/Layout';\r\nimport configureStore from '../store/configureStore';\r\nimport { useState, useEffect } from 'react';\r\nimport { checkUser } from '../lib/Utils/utils';\r\n\r\ntype IProps = { store: Store } & AppInitialProps & AppContext\r\n\r\n// composeWithDevTools()\r\n// const configureStore = () => {\r\n//   const sagaMiddleware = createSagaMiddleware();\r\n//   const middleware = [composeWithDevTools(), sagaMiddleware]\r\n//   const store = createStore(rootReducer,  applyMiddleware(sagaMiddleware) );\r\n//   // if (req || !isServer) {\r\n//     sagaMiddleware.run(rootSaga)\r\n//   // }\r\n//   return store;\r\n// };\r\nconst MyApp2 = (props: IProps) => {\r\n  const { Component, pageProps, store } = props;\r\n  const [token, setToken] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const tokenData = JSON.parse(sessionStorage.getItem(\"idToken\"));\r\n    setToken(tokenData);\r\n  }, []);\r\n  \r\n  return (\r\n    <ThemeProvider theme={{ fontFamily: 'Noto Sans KR' }}>\r\n      <Provider store={store}>\r\n        <Layout token={token}>\r\n          <Component {...pageProps} />\r\n        </Layout>\r\n      </Provider>\r\n      <>\r\n        <GlobalStyle />\r\n      </>\r\n    </ThemeProvider>\r\n  );\r\n}\r\nMyApp2.getInitialProps = async ({ Component, ctx, sessionStorage }) => {\r\n  let pageProps = {}\r\n  // 서버사이드에서 리덕스 연결 성공. 원인 공부\r\n  if (ctx.isServer) {\r\n    pageProps = await Component.getInitialProps(ctx)\r\n    }\r\n    return { pageProps }\r\n}\r\n\r\nexport default withRedux(configureStore)(withReduxSaga(MyApp2));\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  html {\r\n    font-size:62.5%;\r\n    background-color: #fff;\r\n  }\r\n  body {\r\n    margin: 0;\r\n    padding: 0;\r\n    font-size: 18px;\r\n    font-weight: normal;\r\n    line-height: 1.8;\r\n    color: #343a40;\r\n    font-family: 'Noto Sans KR';\r\n    box-sizing: border-box;\r\n  }\r\n  * {\r\n    margin: 0;\r\n    padding: 0;\r\n    outline: 0;\r\n    border: 0;\r\n    vertical-align: top;\r\n  }\r\n  article, footer, header, aside, details, header, nav, section {\r\n    display: block;\r\n  }\r\n\r\n  img {\r\n    max-width: 100%;\r\n  }\r\n  a {\r\n    text-decoration: none;\r\n    color: #343a40;\r\n  }\r\n  h1 {\r\n    font-weight: 700;\r\n  }\r\n  button {\r\n    cursor: pointer;\r\n  }\r\n  p {\r\n    margin: 0;\r\n  }`;\r\n"]},"metadata":{},"sourceType":"module"}