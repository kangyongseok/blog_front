{"version":3,"file":"static/webpack/static\\development\\pages\\options.js.545ed1e0781b5d7886ee.hot-update.js","sources":["webpack:///./containers/Write/WriteContainerTest.tsx"],"sourcesContent":["import React, { useRef, useCallback, useEffect } from 'react';\r\nimport Router, { useRouter } from 'next/router';\r\nimport styled from 'styled-components';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Editor, Head, Preview } from '../../components/Write';\r\nimport { RootState } from '../../store/modules';\r\nimport { getValue, resetInputValue, addTagArr } from '../../store/modules/postUI';\r\nimport { ROUTES } from '../../lib/Routes/Routes';\r\nimport { removeExp, checkUser } from '../../lib/Utils/utils';\r\nimport { Post, postAsync } from '../../store/modules/post';\r\nimport EditorHeaderContainer from '../Common/EditorHeaderContainer';\r\n\r\ntype WriteContainerProps = {};\r\n\r\nconst WriteContainerTest = ({}: WriteContainerProps) => {\r\n\tconst dispatch = useDispatch();\r\n\t// const mdRef = useRef<HTMLDivElement>();\r\n\tconst { postWrite, postsList } = useSelector((state: RootState) => ({\r\n\t\tpostWrite: state.postUI.postWrite,\r\n    postsList: state.post.postsList,\r\n\t}));\r\n\r\n\t// const handleChange = useCallback(\r\n\t// \t(e: React.ChangeEvent<any>) => {\r\n\t// \t\tconst { value, name } = e.target;\r\n\t// \t\tdispatch(getValue({ name, value }));\r\n\t// \t},\r\n\t// \t[ dispatch ]\r\n\t// );\r\n\r\n\t// const handleConv = useCallback(\r\n\t// \t(html: string) => {\r\n\t// \t\tdispatch(getValue({ name: 'mdValue', value: html }));\r\n\t// \t},\r\n\t// \t[ dispatch ]\r\n\t// );\r\n\r\n\t// const onUpload = useCallback(async () => {\r\n\t// \tconst uploadDate = new Date().toISOString();\r\n\t// \tconst { title, inputValue, mdValue, imgUrl, subTitle, tagArr} = postWrite\r\n\t// \tconst withoutExp = removeExp(inputValue);\r\n\t// \tconst dataForUpload: Post = {\r\n\t// \t\ttitle: title,\r\n\t// \t\trawContent: inputValue,\r\n\t// \t\tcontent: withoutExp,\r\n\t// \t\tcontentMd: mdValue,\r\n\t// \t\tdate: uploadDate,\r\n\t// \t\timgUrl: imgUrl,\r\n\t// \t\tid: postsList.data[0].id + 1,\r\n  //      subTitle: subTitle,\r\n  //      tagArr: tagArr,\r\n\t// \t};\r\n\t// \ttry {\r\n\t// \t\tdispatch(postAsync.request(dataForUpload));\r\n\t// \t\tRouter.push(ROUTES.home, ROUTES.home, { shallow: true });\r\n\t// \t} catch (err) {\r\n\t// \t\tthrow err;\r\n\t// \t}\r\n\t// },[ dispatch, postWrite ]\r\n\t// );\r\n\r\n\r\n\t// useEffect(\r\n\t// \t() => {\r\n\t// \t\tmdRef.current.scrollTo(0, mdRef.current.scrollHeight);\r\n\t// \t},\r\n\t// \t[ postWrite.inputValue ]\r\n\t// );\r\n\r\n\t// useEffect(() => {\r\n\t// \treturn () => {\r\n\t// \t\tdispatch(resetInputValue());\r\n\t// \t\tcheckUser();\r\n\t// \t};\r\n\t// }, []);\r\n\treturn (\r\n\t\t<EditBox>\r\n\t\t\t{/* <EditPart>\r\n\t\t\t\t<EditorHeaderContainer \r\n          postWrite={postWrite}\r\n          onChange={handleChange}\r\n          onUpload={onUpload}\r\n        />\r\n\t\t\t\t<Editor inputValue={postWrite.inputValue} onChange={handleChange} />\r\n\t\t\t</EditPart> */}\r\n\t\t\t<Preview inputValue={postWrite.inputValue} mdRef={mdRef} onChange={handleConv} />\r\n\t\t</EditBox>\r\n\t);\r\n};\r\n\r\nexport default WriteContainerTest;\r\nconst EditBox = styled.div`\r\n\tdisplay: flex;\r\n\theight: 94rem;\r\n\tjustify-content: space-between;\r\n`;\r\n\r\nconst EditPart = styled.div`width: calc(50% - 1.6rem);`;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AASA;AAAA;AACA;AAAA;AACA;AAFA;AAGA;AACA;AACA;AAFA;AAHA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAUA;AAAA;AAAA;AAAA;AAvEA;AACA;AA2EA;AACA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}