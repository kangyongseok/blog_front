{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.f39dc68dde135af5ff9d.hot-update.js","sources":["webpack:///./lib/Utils/utils.ts"],"sourcesContent":["import firebase, { provider } from '../../config/init-firebase';\r\n\r\nexport const formatDate = (dateData: string) => {\r\n  const formatted: Date = new Date(dateData);\r\n  const year: number = formatted.getFullYear();\r\n  let month: number | string = formatted.getMonth() + 1;\r\n  let day: number | string = formatted.getDate();\r\n  month = Number(month) < 10 ? `0${month}` : month;\r\n  day = Number(day) < 10 ? `0${day}` : day;\r\n\r\n  return `${year}년 ${month}월 ${day}일`;\r\n};  \r\n\r\nexport const setItem = (key: string, obj: object) => {\r\n  return sessionStorage.setItem(key, JSON.stringify(obj));\r\n};\r\n\r\nexport const getItem = (key: string) => {\r\n  return sessionStorage.getItem(JSON.parse(key));\r\n};\r\n\r\nexport const removeExp = (str: string) => {\r\n  const regExp = /[\\{\\}\\[\\]\\/?.,;:|\\)*~`!^\\-_+<>@\\#$%&\\\\\\=\\(\\'\\\"]/gi\r\n  if(regExp.test(str)) {\r\n    const result = str.replace(regExp, '');\r\n    return result;\r\n  } return str;\r\n} \r\n\r\n\r\nexport const logoutFn = () => {\r\n  firebase.auth().signOut().then(function() {\r\n    // Sign-out successful.\r\n    sessionStorage.removeItem(\"idToken\");\r\n  }).catch(function(error) {\r\n    // An error happened.\r\n  });\r\n}\r\n\r\nexport const checkUser = async () => {\r\n  const user = await firebase.auth().currentUser;\r\n  return user;\r\n}\r\n\r\nexport const loginEmail = (email: string, password: string) => {\r\n  const result = firebase.auth()\r\n    .signInWithEmailAndPassword(email, password)\r\n    .then((res) => {\r\n      const token = JSON.stringify(res.user);\r\n      sessionStorage.setItem(\"idToken\", token);\r\n      return res\r\n  }).catch(err =>  console.log(err));\r\n  return result;\r\n}\r\n\r\nexport const checkLogin = () => {\r\n  const tokenObj = sessionStorage.getItem(\"idToken\");\r\n  const isToken = JSON.parse(tokenObj)\r\n  return isToken;\r\n  // if (!isToken) {\r\n  // \tconsole.log(isToken);\r\n  // \tRouter.push(ROUTES.home, ROUTES.home, { shallow: true });\r\n  // }\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AARA;AAWA;AACA;AADA;AAIA;AACA;AADA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AADA;AALA;AASA;AACA;AACA;AACA;AAFA;AAAA;AADA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAKA;AACA;AAGA;AACA;AAAA;AACA;AALA;AAMA;AANA;AAOA;AARA;AAWA;AACA;AACA;AACA;AAEA;AACA;AACA;AAPA;;;;A","sourceRoot":""}