{"ast":null,"code":"import _objectDestructuringEmpty from \"@babel/runtime-corejs2/helpers/esm/objectDestructuringEmpty\";\nvar __jsx = React.createElement;\nimport React, { useRef } from 'react';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Preview } from '../../components/Write';\n\nvar WriteContainerTest = function WriteContainerTest(_ref) {\n  _objectDestructuringEmpty(_ref);\n\n  var dispatch = useDispatch();\n  var mdRef = useRef();\n\n  var _useSelector = useSelector(function (state) {\n    return {\n      postWrite: state.postUI.postWrite,\n      postsList: state.post.postsList\n    };\n  }),\n      postWrite = _useSelector.postWrite,\n      postsList = _useSelector.postsList; // const handleChange = useCallback(\n  // \t(e: React.ChangeEvent<any>) => {\n  // \t\tconst { value, name } = e.target;\n  // \t\tdispatch(getValue({ name, value }));\n  // \t},\n  // \t[ dispatch ]\n  // );\n  // const handleConv = useCallback(\n  // \t(html: string) => {\n  // \t\tdispatch(getValue({ name: 'mdValue', value: html }));\n  // \t},\n  // \t[ dispatch ]\n  // );\n  // const onUpload = useCallback(async () => {\n  // \tconst uploadDate = new Date().toISOString();\n  // \tconst { title, inputValue, mdValue, imgUrl, subTitle, tagArr} = postWrite\n  // \tconst withoutExp = removeExp(inputValue);\n  // \tconst dataForUpload: Post = {\n  // \t\ttitle: title,\n  // \t\trawContent: inputValue,\n  // \t\tcontent: withoutExp,\n  // \t\tcontentMd: mdValue,\n  // \t\tdate: uploadDate,\n  // \t\timgUrl: imgUrl,\n  // \t\tid: postsList.data[0].id + 1,\n  //      subTitle: subTitle,\n  //      tagArr: tagArr,\n  // \t};\n  // \ttry {\n  // \t\tdispatch(postAsync.request(dataForUpload));\n  // \t\tRouter.push(ROUTES.home, ROUTES.home, { shallow: true });\n  // \t} catch (err) {\n  // \t\tthrow err;\n  // \t}\n  // },[ dispatch, postWrite ]\n  // );\n  // useEffect(\n  // \t() => {\n  // \t\tmdRef.current.scrollTo(0, mdRef.current.scrollHeight);\n  // \t},\n  // \t[ postWrite.inputValue ]\n  // );\n  // useEffect(() => {\n  // \treturn () => {\n  // \t\tdispatch(resetInputValue());\n  // \t\tcheckUser();\n  // \t};\n  // }, []);\n\n\n  return __jsx(EditBox, null, __jsx(Preview, {\n    inputValue: postWrite.inputValue,\n    mdRef: mdRef,\n    onChange: handleConv\n  }));\n};\n\nexport default WriteContainerTest;\nvar EditBox = styled.div.withConfig({\n  displayName: \"WriteContainerTest__EditBox\",\n  componentId: \"sc-1ww7q8q-0\"\n})([\"display:flex;height:94rem;justify-content:space-between;\"]);\nvar EditPart = styled.div.withConfig({\n  displayName: \"WriteContainerTest__EditPart\",\n  componentId: \"sc-1ww7q8q-1\"\n})([\"width:calc(50% - 1.6rem);\"]);","map":{"version":3,"sources":["C:/Users/lchon/Project/blog_front/containers/Write/WriteContainerTest.tsx"],"names":["WriteContainerTest","dispatch","useDispatch","mdRef","useRef","postWrite","postsList","useSelector","state","handleConv","EditBox","styled","EditPart"],"mappings":";;AAAA,OAAA,KAAA,IAAA,MAAA,QAAA,OAAA;AAEA,OAAA,MAAA,MAAA,mBAAA;AACA,SAAA,WAAA,EAAA,WAAA,QAAA,aAAA;AACA,SAAA,OAAA,QAAA,wBAAA;;AAUA,IAAMA,kBAAkB,GAAG,SAArBA,kBAAqB,CAAA,IAAA,EAA6B;AAAA,EAAA,yBAAA,CAAA,IAAA,CAAA;;AACvD,MAAMC,QAAQ,GAAGC,WAAjB,EAAA;AACA,MAAMC,KAAK,GAAGC,MAAd,EAAA;;AAFuD,MAAA,YAAA,GAGtBG,WAAW,CAAC,UAAA,KAAA,EAAA;AAAA,WAAuB;AACnEF,MAAAA,SAAS,EAAEG,KAAK,CAALA,MAAAA,CADwD,SAAA;AAEjEF,MAAAA,SAAS,EAAEE,KAAK,CAALA,IAAAA,CAAWF;AAF2C,KAAvB;AAHU,GAGX,CAHW;AAAA,MAG/CD,SAH+C,GAAA,YAAA,CAAA,SAAA;AAAA,MAGpCC,SAHoC,GAAA,YAAA,CAAA,SAAA,CAAA,CAQvD;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC;AACA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SACC,KAAA,CAAA,OAAA,EAAA,IAAA,EASC,KAAA,CAAA,OAAA,EAAA;AAAS,IAAA,UAAU,EAAED,SAAS,CAA9B,UAAA;AAA2C,IAAA,KAAK,EAAhD,KAAA;AAAyD,IAAA,QAAQ,EAAEI;AAAnE,GAAA,CATD,CADD;AA7DD,CAAA;;AA4EA,eAAA,kBAAA;AACA,IAAMC,OAAO,GAAGC,MAAM,CAAT,GAAGA,CAAH,UAAGA,CAAH;AAAA,EAAA,WAAA,EAAA,6BAAA;AAAA,EAAA,WAAA,EAAA;AAAA,CAAGA,EAAH,CAAb,0DAAa,CAAGA,CAAhB;AAMA,IAAMC,QAAQ,GAAGD,MAAM,CAAT,GAAGA,CAAH,UAAGA,CAAH;AAAA,EAAA,WAAA,EAAA,8BAAA;AAAA,EAAA,WAAA,EAAA;AAAA,CAAGA,EAAH,CAAd,2BAAc,CAAGA,CAAjB","sourcesContent":["import React, { useRef, useCallback, useEffect } from 'react';\r\nimport Router, { useRouter } from 'next/router';\r\nimport styled from 'styled-components';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Editor, Head, Preview } from '../../components/Write';\r\nimport { RootState } from '../../store/modules';\r\nimport { getValue, resetInputValue, addTagArr } from '../../store/modules/postUI';\r\nimport { ROUTES } from '../../lib/Routes/Routes';\r\nimport { removeExp, checkUser } from '../../lib/Utils/utils';\r\nimport { Post, postAsync } from '../../store/modules/post';\r\nimport EditorHeaderContainer from '../Common/EditorHeaderContainer';\r\n\r\ntype WriteContainerProps = {};\r\n\r\nconst WriteContainerTest = ({}: WriteContainerProps) => {\r\n\tconst dispatch = useDispatch();\r\n\tconst mdRef = useRef<HTMLDivElement>();\r\n\tconst { postWrite, postsList } = useSelector((state: RootState) => ({\r\n\t\tpostWrite: state.postUI.postWrite,\r\n    postsList: state.post.postsList,\r\n\t}));\r\n\r\n\t// const handleChange = useCallback(\r\n\t// \t(e: React.ChangeEvent<any>) => {\r\n\t// \t\tconst { value, name } = e.target;\r\n\t// \t\tdispatch(getValue({ name, value }));\r\n\t// \t},\r\n\t// \t[ dispatch ]\r\n\t// );\r\n\r\n\t// const handleConv = useCallback(\r\n\t// \t(html: string) => {\r\n\t// \t\tdispatch(getValue({ name: 'mdValue', value: html }));\r\n\t// \t},\r\n\t// \t[ dispatch ]\r\n\t// );\r\n\r\n\t// const onUpload = useCallback(async () => {\r\n\t// \tconst uploadDate = new Date().toISOString();\r\n\t// \tconst { title, inputValue, mdValue, imgUrl, subTitle, tagArr} = postWrite\r\n\t// \tconst withoutExp = removeExp(inputValue);\r\n\t// \tconst dataForUpload: Post = {\r\n\t// \t\ttitle: title,\r\n\t// \t\trawContent: inputValue,\r\n\t// \t\tcontent: withoutExp,\r\n\t// \t\tcontentMd: mdValue,\r\n\t// \t\tdate: uploadDate,\r\n\t// \t\timgUrl: imgUrl,\r\n\t// \t\tid: postsList.data[0].id + 1,\r\n  //      subTitle: subTitle,\r\n  //      tagArr: tagArr,\r\n\t// \t};\r\n\t// \ttry {\r\n\t// \t\tdispatch(postAsync.request(dataForUpload));\r\n\t// \t\tRouter.push(ROUTES.home, ROUTES.home, { shallow: true });\r\n\t// \t} catch (err) {\r\n\t// \t\tthrow err;\r\n\t// \t}\r\n\t// },[ dispatch, postWrite ]\r\n\t// );\r\n\r\n\r\n\t// useEffect(\r\n\t// \t() => {\r\n\t// \t\tmdRef.current.scrollTo(0, mdRef.current.scrollHeight);\r\n\t// \t},\r\n\t// \t[ postWrite.inputValue ]\r\n\t// );\r\n\r\n\t// useEffect(() => {\r\n\t// \treturn () => {\r\n\t// \t\tdispatch(resetInputValue());\r\n\t// \t\tcheckUser();\r\n\t// \t};\r\n\t// }, []);\r\n\treturn (\r\n\t\t<EditBox>\r\n\t\t\t{/* <EditPart>\r\n\t\t\t\t<EditorHeaderContainer \r\n          postWrite={postWrite}\r\n          onChange={handleChange}\r\n          onUpload={onUpload}\r\n        />\r\n\t\t\t\t<Editor inputValue={postWrite.inputValue} onChange={handleChange} />\r\n\t\t\t</EditPart> */}\r\n\t\t\t<Preview inputValue={postWrite.inputValue} mdRef={mdRef} onChange={handleConv} />\r\n\t\t</EditBox>\r\n\t);\r\n};\r\n\r\nexport default WriteContainerTest;\r\nconst EditBox = styled.div`\r\n\tdisplay: flex;\r\n\theight: 94rem;\r\n\tjustify-content: space-between;\r\n`;\r\n\r\nconst EditPart = styled.div`width: calc(50% - 1.6rem);`;\r\n"]},"metadata":{},"sourceType":"module"}