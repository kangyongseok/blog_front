{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useRef, useCallback, useEffect } from 'react';\nimport Router from 'next/router';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getValue, resetInputValue } from '../../store/modules/postUI';\nimport { ROUTES } from '../../lib/Routes/Routes';\nimport { removeExp, checkUser } from '../../lib/Utils/utils';\nimport { postAsync } from '../../store/modules/post';\n\nconst WriteContainerTest = ({}) => {\n  const dispatch = useDispatch();\n  const mdRef = useRef();\n  const {\n    postWrite,\n    postsList\n  } = useSelector(state => ({\n    postWrite: state.postUI.postWrite,\n    postsList: state.post.postsList\n  }));\n  const handleChange = useCallback(e => {\n    const {\n      value,\n      name\n    } = e.target;\n    dispatch(getValue({\n      name,\n      value\n    }));\n  }, [dispatch]);\n  const handleConv = useCallback(html => {\n    dispatch(getValue({\n      name: 'mdValue',\n      value: html\n    }));\n  }, [dispatch]);\n  const onUpload = useCallback(async () => {\n    const uploadDate = new Date().toISOString();\n    const {\n      title,\n      inputValue,\n      mdValue,\n      imgUrl,\n      subTitle,\n      tagArr\n    } = postWrite;\n    const withoutExp = removeExp(inputValue);\n    const dataForUpload = {\n      title: title,\n      rawContent: inputValue,\n      content: withoutExp,\n      contentMd: mdValue,\n      date: uploadDate,\n      imgUrl: imgUrl,\n      id: postsList.data[0].id + 1,\n      subTitle: subTitle,\n      tagArr: tagArr\n    };\n\n    try {\n      dispatch(postAsync.request(dataForUpload));\n      Router.push(ROUTES.home, ROUTES.home, {\n        shallow: true\n      });\n    } catch (err) {\n      throw err;\n    }\n  }, [dispatch, postWrite]);\n  useEffect(() => {\n    mdRef.current.scrollTo(0, mdRef.current.scrollHeight);\n  }, [postWrite.inputValue]);\n  useEffect(() => {\n    return () => {\n      dispatch(resetInputValue());\n      checkUser();\n    };\n  }, []);\n  return __jsx(EditBox, null);\n};\n\nexport default WriteContainerTest;\nconst EditBox = styled.div.withConfig({\n  displayName: \"WriteContainerTest__EditBox\",\n  componentId: \"sc-1ww7q8q-0\"\n})([\"display:flex;height:94rem;justify-content:space-between;\"]);\nconst EditPart = styled.div.withConfig({\n  displayName: \"WriteContainerTest__EditPart\",\n  componentId: \"sc-1ww7q8q-1\"\n})([\"width:calc(50% - 1.6rem);\"]);","map":{"version":3,"sources":["C:/Users/lchon/Project/blog_front/containers/Write/WriteContainerTest.tsx"],"names":["React","useRef","useCallback","useEffect","Router","styled","useSelector","useDispatch","getValue","resetInputValue","ROUTES","removeExp","checkUser","postAsync","WriteContainerTest","dispatch","mdRef","postWrite","postsList","state","postUI","post","handleChange","e","value","name","target","handleConv","html","onUpload","uploadDate","Date","toISOString","title","inputValue","mdValue","imgUrl","subTitle","tagArr","withoutExp","dataForUpload","rawContent","content","contentMd","date","id","data","request","push","home","shallow","err","current","scrollTo","scrollHeight","EditBox","div","EditPart"],"mappings":"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","sourcesContent":["import React, { useRef, useCallback, useEffect } from 'react';\r\nimport Router, { useRouter } from 'next/router';\r\nimport styled from 'styled-components';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Editor, Head, Preview } from '../../components/Write';\r\nimport { RootState } from '../../store/modules';\r\nimport { getValue, resetInputValue, addTagArr } from '../../store/modules/postUI';\r\nimport { ROUTES } from '../../lib/Routes/Routes';\r\nimport { removeExp, checkUser } from '../../lib/Utils/utils';\r\nimport { Post, postAsync } from '../../store/modules/post';\r\nimport EditorHeaderContainer from '../Common/EditorHeaderContainer';\r\n\r\ntype WriteContainerProps = {};\r\n\r\nconst WriteContainerTest = ({}: WriteContainerProps) => {\r\n\tconst dispatch = useDispatch();\r\n\tconst mdRef = useRef<HTMLDivElement>();\r\n\tconst { postWrite, postsList } = useSelector((state: RootState) => ({\r\n\t\tpostWrite: state.postUI.postWrite,\r\n    postsList: state.post.postsList,\r\n\t}));\r\n\r\n\tconst handleChange = useCallback(\r\n\t\t(e: React.ChangeEvent<any>) => {\r\n\t\t\tconst { value, name } = e.target;\r\n\t\t\tdispatch(getValue({ name, value }));\r\n\t\t},\r\n\t\t[ dispatch ]\r\n\t);\r\n\r\n\tconst handleConv = useCallback(\r\n\t\t(html: string) => {\r\n\t\t\tdispatch(getValue({ name: 'mdValue', value: html }));\r\n\t\t},\r\n\t\t[ dispatch ]\r\n\t);\r\n\r\n\tconst onUpload = useCallback(async () => {\r\n\t\tconst uploadDate = new Date().toISOString();\r\n\t\tconst { title, inputValue, mdValue, imgUrl, subTitle, tagArr} = postWrite\r\n\t\tconst withoutExp = removeExp(inputValue);\r\n\t\tconst dataForUpload: Post = {\r\n\t\t\ttitle: title,\r\n\t\t\trawContent: inputValue,\r\n\t\t\tcontent: withoutExp,\r\n\t\t\tcontentMd: mdValue,\r\n\t\t\tdate: uploadDate,\r\n\t\t\timgUrl: imgUrl,\r\n\t\t\tid: postsList.data[0].id + 1,\r\n       subTitle: subTitle,\r\n       tagArr: tagArr,\r\n\t\t};\r\n\t\ttry {\r\n\t\t\tdispatch(postAsync.request(dataForUpload));\r\n\t\t\tRouter.push(ROUTES.home, ROUTES.home, { shallow: true });\r\n\t\t} catch (err) {\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t},[ dispatch, postWrite ]\r\n\t);\r\n\r\n\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\tmdRef.current.scrollTo(0, mdRef.current.scrollHeight);\r\n\t\t},\r\n\t\t[ postWrite.inputValue ]\r\n\t);\r\n\r\n\tuseEffect(() => {\r\n\t\treturn () => {\r\n\t\t\tdispatch(resetInputValue());\r\n\t\t\tcheckUser();\r\n\t\t};\r\n\t}, []);\r\n\treturn (\r\n\t\t<EditBox>\r\n\t\t\t{/* <EditPart>\r\n\t\t\t\t<EditorHeaderContainer \r\n          postWrite={postWrite}\r\n          onChange={handleChange}\r\n          onUpload={onUpload}\r\n        />\r\n\t\t\t\t<Editor inputValue={postWrite.inputValue} onChange={handleChange} />\r\n\t\t\t</EditPart> */}\r\n\t\t\t{/* <Preview inputValue={postWrite.inputValue} mdRef={mdRef} onChange={handleConv} /> */}\r\n\t\t</EditBox>\r\n\t);\r\n};\r\n\r\nexport default WriteContainerTest;\r\nconst EditBox = styled.div`\r\n\tdisplay: flex;\r\n\theight: 94rem;\r\n\tjustify-content: space-between;\r\n`;\r\n\r\nconst EditPart = styled.div`width: calc(50% - 1.6rem);`;\r\n"]},"metadata":{},"sourceType":"module"}